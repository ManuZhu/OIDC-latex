input <a,f,m>,s
let s':=s
let mdec, k, k′, inDomain such that
􏰃    ⟨mdec,k⟩ ≡ deca(m,k′)∧⟨inDomain,k′⟩ ∈ s.sslkeys
􏰃    if possible; otherwise stop ⟨⟩, s
let n, method, path, parameters, headers, body such that 
	⟨HTTPReq,n,method,path,parameters,headers,body⟩≡mdec
	if possible; otherwise stop <>,s
if path≡/script then
	let m':=⟨HTTPResp,n,200,⟨⟩,IdPScript⟩
	stop <f,a,m'>,s
else if path≡/login
	let sessionid := headers[Cookie][sessionid]
	let session := s'.sessions[sessionid]
	let username:=body[username]
	let password:=body[password]
	if username ≡ ⊥ ∪ password ≡ ⊥ then
		let m' := ⟨HTTPResp,n,200,⟨⟩,PARAMETERERROR⟩
		stop <f,a,m'>, s'
	end if
	if password ̸≡ secretOfID(username) then
		let m' := ⟨HTTPResp,n,200,⟨⟩,LoginFailure⟩
		stop <f,a,m'>, s'
	end if
	let session[uid] := UIDOfUser(username)
	let m' := ⟨HTTPResp,n,200,⟨⟩,LoginResult⟩
	stop <f,a,m'>, s'
else if path≡/loginInfo
	let sessionid := headers[Cookie][sessionid]
	let session := s'.sessions[sessionid]
	let username := session[username]
	if username /≡ ⊥ then
		let m' := ⟨HTTPResp,n,200,⟨⟩,Logged⟩
		stop <f,a,m'>, s'
	end if
	let m' := ⟨HTTPResp,n,200,⟨⟩,UnLogged⟩
	stop <f,a,m'>, s'
else if path ≡ /dynamicRegistration
	let PID_RP := body[PID_RP]
	let Endpoint := body[Endpoint]
	let Nonce := body[Nonce]
	if PID_RP ≡ ⊥ ∪ Endpoint ≡ ⊥ ∪ Nonce ≡ ⊥ then
		let m' := ⟨HTTPResp,n,200,⟨⟩,PARAMETERERROR⟩
		stop <f,a,m'>, s'
	end if	
	if PID ∈ ListOFRPID() then
		let Content := <Fail, PID_RP, Nonce, s'.Validity>
		let Sig := sig(Content, s'.signKey)
		let RegistrationResult := <Content, Sig>
		let m' := ⟨HTTPResp,n,200,⟨⟩,<RegistrationResult, RegistrationResult>⟩
		stop <f,a,m'>,sF
	end if
	let Time := v3
	let RPInfo := <PID_RP, Endpoint, Time>
	let s'.RPs := s'.RPs + <>RPInfo
	let Content := <OK, PID_RP, Nonce, s'.Validity>
	let Sig := sig(Content, s'.signKey)
	let RegistrationResult := <Content, Sig>
	let m' := ⟨HTTPResp,n,200,⟨⟩,<RegistrationResult, RegistrationResult>⟩
	stop <f,a,m'>, s
else if path ≡ /authorize then
	let sessionid := headers[Cookie][sessionid]
	let session := s'.sessions[sessionid]
	let username := session[username]
	if username /≡ ⊥ then
		let m' := ⟨HTTPResp,n,200,⟨⟩,Failed⟩
		stop <f,a,m'>, s'
	end if
	let PID_RP := parameters[PID_RP]
	let Endpoint := parameters[Endpoint]
	if PID /∈ listOFRPID then
		let m' := ⟨HTTPResp,n,200,⟨⟩,Failed⟩
		stop <a,f,m'>, s
	end if
	if Endpoint /∈ EndpointsOFRP(PID) then
		let m' := ⟨HTTPResp,n,200,⟨⟩,Failed⟩
		stop <a,f,m'>, s
	end if
	let UID := session[uid]
	let PID_U := ModPow(PID_RP, UID, s'.p)
	let Content := <PID, PIDU, s'.ID_IdP, s'.Validity>
	let Sig := sig(Content, s'.signKey)
	let Token := <Content, Sig>
	let s'.Tokens := s'.Token + <>Token
	let m' := ⟨HTTPResp,n,200,⟨⟩,<Token, Token>>
	stop <a,f,m'>, s'
stop <>,s


