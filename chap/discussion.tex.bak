\section{Discussion}
\label{sec:discussion}
In this section, we provide some discussion about Recluse.

\noindent{\textbf{Malicious FWD in SPRESSO.}} The describe of login process in SPRESSO is shown in Appendix~\ref{•}. In SPRESSO, FWD is the entity chosen by RP and ensures the confidentiality of identity proof, which is confirmed by only transmitting the identity proof to the correct RP. Therefore, we consider that the FWD in SPRESSO is semi-honest, as it never breaks the authentication for honest RP, for example, stealing the identity proof, injecting adversary's identity proof and so on. The malicious FWD only helps the malicious to achieve the valid identity proof for other RP without any modification in the honest RP's authentication process. It is proved that the malicious can lead the victim user to upload the valid identity proof in one RP only the RP chooses the malicious FWD. The attack is also shown in Appendix~\ref{•}.


%RP certificate
\noindent{\textbf{RP Certificate.}} In Recluse, the RP certificate $Cert_{RP}$ is used to provide the trusted binding between the $RPID$ and the RP's endpoint. RP certificate is compatible with the X.509 certificate. To integrate RP certificate in X.509 certificate, the CA generates the $RPID$ for the RP, and combines it in the subject  filed (in detail, the common name)  of the certificate while the endpoint is already contained. Instead of sending  in Step 3 in Figure~\ref{fig:process}, $Cert_{RP}$  is sent to the user during the key agreement in TLS. Moreover, the mechanisms (e.g., the Certificate Transparency) to avoiding illegal certificate issued by the CA may be adopted to ensure the correctness of $RPID$, i.e., gloally unique and being the primitive root.


%SPRESSO跨平台:我们目前的方案只在browser实现
\noindent{\textbf{Platform.}} Recluse doesn't store any persistent information in the platform and may be implemented to be platform independent. Firstly, all the information (e.g., $Cert_{RP}$, $PRPID$, $n_u$, $PPID$ and one-time endpoint) processed and cached in the user's platform is only correlated with the current session, which allows the user to login at any RP with a new platform without any synchronization. Secondly, in the current implementation of Recluse, a browser extension is adopted to capture the redirection from the RP and IdP, to reduce the modification at the RP and IdP.
However, to comfort the requirement of using Recluse in multiple platforms (e.g., mobile phones), Recluse is able to be implemented based on HTML5, without the use of any no browser extensions, or plug-ins. But it is required the code should be trustful, which is ensured to be correct and unmodifiable by any adversary. As the IdP is considered honest, the code could be provided by IdP, which contains only about 300 lines of code and as it runs in the browser, IdP cannot modify or monitor the code without prior inserted malicious code. Moreover, the new mechanism called SRI (subresource integrity) under development enables the opener of an iframe to require the hash of document loaded in it to equal with the one set by opener, which ensures the code cannot be malicious even the IdP try to insert the malicious code. 
%However, Recluse is able to be implemented without based on HTML5, avoiding the use of any no browser extensions, or plug-ins. The redirect URL is placed as one element in the response which triggers the JavaScript a the user to send a message to this URL. The functions at the user are processed in the JavaScript running in a Shadow DOM.


%兼容:目前只提供隐式模式,对其他模式与协议的兼容方法
\noindent{\textbf{Support of authorization code flow.}} Recluse may be extended to hide the users' access trace in  the authorization code flow. The RP obtains the authorization code in the same way as the  identity proof in implicit protocol flow. However, the RPs needs to connect to the IdP directly, and  uses this code with  the RP identifier and secret for the identity proof. To avoid the IdP obtaining the IP address from the connection, the anonymous network (e.g., Tor) may be used to establish the connection. While the RP's identifier and secret may be provided by the user who performs the dynamic registration described above.

%Dos attack to RP:
\noindent{\textbf{DoS attack.}} The adversary may perform the DoS attack. The malicious RPs may try to exhaust the $RPID$  by applying the $Cert_{RP}$ frequently. However the large $P$ provides a large set of $RPID$, and IdP may provide the offline check for $Cert_{RP}$ as it occurs only once for a RP (i.e., the initial registration). The malicious users may attempt to make the other users' $PRPID$ be rejected at the IdP, by registering a large set of $PRPID$s at IdP. However, the large $P$ makes a huge number of dynamic registration required, and IdP may adopt existing DoS mitigation  to limit the number of adversary's dynamic registrations. 

%side channel attack
\noindent{\textbf{Side channel attack.}} Recluse provides the security and privacy, under the assumption that IdP never leaks $r$ of $RPID=g^r$ and UID, while RP and the user never leaks $n_u*n_{RP}$ and $t$. The malicious user may infer the $r$ and $UID$ by analyzing the timing difference of the responses. IdP may avoid this side channel attack by adding unpredicted or maximum needed delay. The curious IdP who fails to observe the global traffic, fails to perform the side attack on $n_u*n_{RP}$ and $t$, as it fails to measure the timing correlated with these two values.

\noindent{\textbf{Identity injection by malicious IdP.}} It has been discussed in~\cite{SPRESSO} that even the impersonate attack by malicious IdP is not considered, the malicious might lead the user to access the RP as the identity of the adversary. SPRESSO requires that user should input his/her email at RP to avoid the identity injection, which is also available in Recluse by adding the extra user name (defined by user for each RP) input. 
